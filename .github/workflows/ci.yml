name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run linting
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run black formatting check
      run: |
        black --check --diff .

    - name: Run mypy type checking
      run: |
        mypy etl/ --ignore-missing-imports

    - name: Run Django system checks
      env:
        SECRET_KEY: test-secret-key-for-ci
        DEBUG: true
      run: |
        python manage.py check

    - name: Run migrations
      env:
        SECRET_KEY: test-secret-key-for-ci
        DEBUG: true
      run: |
        python manage.py migrate

    - name: Run unit tests
      env:
        SECRET_KEY: test-secret-key-for-ci
        DEBUG: true
      run: |
        python -m pytest tests/ -v --cov=etl --cov-report=xml --cov-report=html

    - name: Run Django tests
      env:
        SECRET_KEY: test-secret-key-for-ci
        DEBUG: true
      run: |
        python manage.py test

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Run safety check
      run: |
        safety check

    - name: Run bandit security check
      run: |
        bandit -r etl/ -f json -o bandit-report.json || true
        bandit -r etl/ --severity-level medium
